<?php
/**
 * Created by PhpStorm.
 * User: max18
 * Date: 14.05.2019
 * Time: 8:44
 */

namespace bot\components;

use bot\alisa\AlisaImageCard;

class Navigation
{
    const NEXT = 1;
    const BACKWARD = 2;
    const MAX_ELEMENT = 5;

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞.
     * –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è!
     * –õ—É—á—à–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ image->title –∏ image->footer –æ—Ç–¥–µ–ª—å–Ω–æ.
     *
     * @param int $page
     * @param array $data [
     *  'image' => ..., –ü—É—Ç—å –¥–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏
     *  'title' => ..., –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
     *  'desc' => ...,  –û–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
     *  'button' => ... –ö–Ω–æ–ø–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞(–µ—Å–ª–∏ –µ—Å—Ç—å)
     * ]
     * @param AlisaImageCard $image
     * @param array $buttons
     * @param array $param [
     *  'title' => ...,        –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
     *  'footerText' => ...,   –¢–µ–∫—Å—Ç –≤ —Ñ—É—Ç–µ—Ä–µ—Ä–µ
     *  'footerButton' => ..., –ö–Ω–æ–ø–∫–∞ –≤ —Ñ—É—Ç–µ—Ä–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
     * ]
     *
     * @return string|null
     */
    public static function showList($page, $data, AlisaImageCard &$image, &$buttons, $param = [])
    {
        $content = null;
        if ($data) {
            if (isset($param['title'])) {
                $image->title = $param['title'];
            }
            if ($image->title) {
                $image->title .= self::getPageInfo($page, $data);
            }
            $page = self::getPage($page, $data);
            for ($i = $page['start']; $i < $page['count']; $i++) {
                if (isset($data[$i]['name'])) {
                    if (!isset($data[$i]['title'])) {
                        $data[$i]['title'] = $data[$i]['name'];
                    }
                }
                if (mb_strlen($data[$i]['title'] . ' ' . $data[$i]['description']) < 30) {
                    $content .= '- ' . $data[$i]['title'] . ' ' . $data[$i]['description'];
                } else {
                    $content .= '- ' . $data[$i]['title'];
                }
                $image->addImages($data[$i]['image'] ?? '', $data[$i]['title'] ?? ' ', $data[$i]['description'] ?? ' ', $data[$i]['button'] ?? null);
            }
            if (isset($param['footerText'])) {
                $image->footerText = $param['footerText'];
                if (isset($param['footerButton'])) {
                    $image->footerButton = $param['footerButton'];
                }
            }

            if (is_array($buttons)) {
                $buttons = array_merge($page['button'], $buttons);
            } else {
                $buttons = $page['button'];
            }
        }
        return $content;
    }

    /**
     * –ù–∞–≤–∏–≥–∞—Ü–∏—è.
     * –ü—Ä–æ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è –≤–ø–µ—Ä–µ–¥ –∏–ª–∏ –Ω–∞–∑–∞–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ type.
     *
     * @param int $type - –¢–∏–ø –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–≤–ø–µ—Ä–µ–¥ –∏–ª–∏ –Ω–∞–∑–∞–¥)
     * @param array $param - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param array $data - –ú–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    public static function navigate($type, &$param, $data)
    {
        if (!isset($param['page'])) {
            $param['page'] = 0;
        }
        switch ($type) {
            case self::NEXT:
                $param['page']++;
                $count = count($data);
                $page = (int)($count / self::MAX_ELEMENT);
                if ($count % self::MAX_ELEMENT) {
                    $page++;
                }
                if ($param['page'] >= $page) {
                    $param['page'] = ($page - 1);
                }
                break;
            case self::BACKWARD:
                $param['page']--;
                if ($param['page'] < 0) {
                    $param['page'] = 0;
                }
                break;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     * –í–µ—Ä–Ω–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ, –∞ —Ç–∞–∫–∂–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     *
     * @param int $page - –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
     * @param array $data - –ú–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å
     *
     * @return array ['start' => int, 'count' => int, 'button' => array]
     */
    public static function getPage($page, $data = null)
    {
        $count = self::MAX_ELEMENT;
        $start = $page * $count;
        if (!isset($data[$start])) {
            $start = 0;
        }
        $buttons = [];
        if ($start) {
            $buttons[] = 'üëà –ù–∞–∑–∞–¥';
        }
        if (isset($data[$start + $count])) {
            $buttons[] = '–î–∞–ª—å—à–µ üëâ';
        }
        $count += $start;
        if ($count > count($data)) {
            $count = count($data);
        }
        return ['start' => $start, 'count' => $count, 'button' => $buttons];
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç, –Ω–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     *
     * @param $page - –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
     * @param $data - –ú–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
     *
     * @return string
     */
    public static function getPageInfo($page, $data): string
    {
        if (!isset($data[$page * 5])) {
            $page = 0;
        }
        $pageInfo = ($page + 1) . ' —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑ ';

        $count = count($data);
        $maxPage = (int)($count / 5);
        if ($count % 5) {
            $maxPage++;
        }
        $pageInfo .= $maxPage;
        if ($maxPage == 1) {
            $pageInfo = '';
        } else {
            $pageInfo = '\n' . $pageInfo;
        }
        return $pageInfo;
    }
}